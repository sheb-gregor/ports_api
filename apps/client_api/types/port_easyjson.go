// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA82f429DecodePortsApiAppsClientApiTypes(in *jlexer.Lexer, out *Port) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "city":
			out.City = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "alias":
			if in.IsNull() {
				in.Skip()
				out.Alias = nil
			} else {
				in.Delim('[')
				if out.Alias == nil {
					if !in.IsDelim(']') {
						out.Alias = make([]string, 0, 4)
					} else {
						out.Alias = []string{}
					}
				} else {
					out.Alias = (out.Alias)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Alias = append(out.Alias, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "regions":
			if in.IsNull() {
				in.Skip()
				out.Regions = nil
			} else {
				in.Delim('[')
				if out.Regions == nil {
					if !in.IsDelim(']') {
						out.Regions = make([]string, 0, 4)
					} else {
						out.Regions = []string{}
					}
				} else {
					out.Regions = (out.Regions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Regions = append(out.Regions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "coordinates":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v3 := 0
				for !in.IsDelim(']') {
					if v3 < 2 {
						(out.Coordinates)[v3] = float32(in.Float32())
						v3++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "province":
			out.Province = string(in.String())
		case "timezone":
			out.Timezone = string(in.String())
		case "unlocs":
			if in.IsNull() {
				in.Skip()
				out.Unlocs = nil
			} else {
				in.Delim('[')
				if out.Unlocs == nil {
					if !in.IsDelim(']') {
						out.Unlocs = make([]string, 0, 4)
					} else {
						out.Unlocs = []string{}
					}
				} else {
					out.Unlocs = (out.Unlocs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Unlocs = append(out.Unlocs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA82f429EncodePortsApiAppsClientApiTypes(out *jwriter.Writer, in Port) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		if in.Alias == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Alias {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"regions\":"
		out.RawString(prefix)
		if in.Regions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Regions {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		out.RawByte('[')
		for v9 := range in.Coordinates {
			if v9 > 0 {
				out.RawByte(',')
			}
			out.Float32(float32((in.Coordinates)[v9]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"province\":"
		out.RawString(prefix)
		out.String(string(in.Province))
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.String(string(in.Timezone))
	}
	{
		const prefix string = ",\"unlocs\":"
		out.RawString(prefix)
		if in.Unlocs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Unlocs {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Port) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA82f429EncodePortsApiAppsClientApiTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Port) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA82f429EncodePortsApiAppsClientApiTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Port) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA82f429DecodePortsApiAppsClientApiTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Port) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA82f429DecodePortsApiAppsClientApiTypes(l, v)
}
